package pah9qdbulletjournal;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TitledPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Journal.java
//  @ Date : 4/17/2016
//  @ Author : 
//
//
public class Journal{
    private String name;
    
    private String description;
    
    private ObservableList<Page> pages = FXCollections.observableArrayList();
    
    private static ArrayList<Journal> journals = new ArrayList<>();
    
    private TitledPane titledPane;
    
    public Journal() {
        journals.add(this);
    }
    
    public Journal(String name) {
        this();
        setName(name);
    }
    
    public Journal(String name, String description) {
        this(name);
        setDescription(description);
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getName() {
        return name;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public String getDescription() {
        return description;
    }
    
    public ObservableList<Page> getPages() {
        return pages;
    }
    
    public void addPage(Page page) {
        if(page != null) {
            if(!pages.contains(page)) {
                pages.add(page);
            }
            if(page.getBelongsToJournal() != this) {
                page.setBelongsToJournal(this);
            }
        } else {
            System.out.println("Error in addPage of Journal " + getName());
        }
        
        
    }
    
    public void removePage(Page page) {
        pages.remove(page);
    }
    
    public void saveJournalToFile(File file) throws IOException {
        // Set Journal values
        JSONObject obj = new JSONObject();
        obj.put("name", name);
        obj.put("description", description);
        
        // Create array of pages
        JSONArray pageArray = new JSONArray();
        pages.stream().forEach((page) -> {
            pageArray.add(page.convertToJson());
        });
        
        obj.put("pages", pageArray);
        
        // Save to file
        FileWriter fileWriter = new FileWriter(file);
        fileWriter.write(obj.toJSONString());
        fileWriter.flush();
        fileWriter.close();
    }
    
    public static Journal loadJournalFromJsonObject(JSONObject jsonObject) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
        Journal openJournal = new Journal();
        openJournal.setName((String) jsonObject.get("name"));
        openJournal.setDescription((String) jsonObject.get("description"));
        JSONArray pageArray = (JSONArray) jsonObject.get("pages");
        for(Object obj : pageArray) {
            JSONObject pageObj = (JSONObject) obj;
            // Creates a concreate Page class from the class string found in the JSON
            Page page = (Page) Class.forName((String) pageObj.get("class")).newInstance();
            page.parseJson(pageObj);
            openJournal.addPage(page);
        }
        return openJournal;
    }
    
    public static ArrayList<Journal> getJournals() {
        return journals;
    }
    
    public static void addJournal(Journal journal) {
        Journal.journals.add(journal);
    }

    public TitledPane getTitledPane() {
        return titledPane;
    }

    public void setTitledPane(TitledPane titledPane) {
        this.titledPane = titledPane;
    }
}
